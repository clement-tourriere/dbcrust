name: "Build release binaries"

on:
  workflow_call:
    inputs:
      plan:
        required: true
        type: string
  workflow_dispatch:
  pull_request:
    paths:
      - .github/workflows/build-binaries.yml
      - Cargo.toml
      - Cargo.lock
      - pyproject.toml
      - src/**
      - python/**

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  PACKAGE_NAME: dbcrust
  MODULE_NAME: dbcrust

jobs:
  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: "Build sdist"
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: >
            --manifest-path Cargo.toml
            --out dist

      - name: "Test sdist"
        run: |
          pip install dist/$PACKAGE_NAME-*.tar.gz --force-reinstall
          $PACKAGE_NAME --help

      - name: "Upload sdist"
        uses: actions/upload-artifact@v4
        with:
          name: wheels_sdist
          path: dist

  macos-x86_64:
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4

      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: "Build wheels - x86_64"
        uses: PyO3/maturin-action@v1
        with:
          target: x86_64
          args: >
            --release
            --locked
            --out dist
            --features python

      - name: "Test wheel"
        run: |
          pip install dist/$PACKAGE_NAME-*.whl --force-reinstall
          $PACKAGE_NAME --help

      - name: "Upload wheels"
        uses: actions/upload-artifact@v4
        with:
          name: wheels_${{ env.PACKAGE_NAME }}-macos-x86_64
          path: dist

  macos-aarch64:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: "Build wheels - aarch64"
        uses: PyO3/maturin-action@v1
        with:
          target: aarch64
          args: >
            --release
            --locked
            --out dist
            --features python

      - name: "Test wheel"
        run: |
          pip install dist/$PACKAGE_NAME-*.whl --force-reinstall
          $PACKAGE_NAME --help

      - name: "Upload wheels"
        uses: actions/upload-artifact@v4
        with:
          name: wheels_${{ env.PACKAGE_NAME }}-macos-aarch64
          path: dist

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - i686-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v4

      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: "Build wheels"
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: >
            --release
            --locked
            --out dist
            --features python

      - name: "Test wheel"
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          pip install dist/$PACKAGE_NAME-*.whl --force-reinstall
          $PACKAGE_NAME --help

      - name: "Upload wheels"
        uses: actions/upload-artifact@v4
        with:
          name: wheels_${{ env.PACKAGE_NAME }}-${{ matrix.target }}
          path: dist

  linux-arm64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: "Build wheels - aarch64"
        uses: PyO3/maturin-action@v1
        with:
          target: aarch64-unknown-linux-gnu
          manylinux: auto
          args: >
            --release
            --locked
            --out dist
            --features python
        env:
          CFLAGS_aarch64_unknown_linux_gnu: "-D__ARM_ARCH=8"

      - name: "Upload wheels"
        uses: actions/upload-artifact@v4
        with:
          name: wheels_${{ env.PACKAGE_NAME }}-aarch64-unknown-linux-gnu
          path: dist

  musllinux-x86_64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"


      - name: "Build wheels - x86_64 musl"
        uses: PyO3/maturin-action@v1
        with:
          target: x86_64-unknown-linux-musl
          manylinux: musllinux_1_2
          args: >
            --release
            --locked
            --out dist
            --features python

      - name: "Test wheel"
        uses: addnab/docker-run-action@v3
        with:
          image: alpine:latest
          options: -v ${{ github.workspace }}:/io -w /io
          run: |
            apk add python3 py3-pip
            pip install dist/dbcrust-*.whl --force-reinstall --break-system-packages
            dbcrust --help

      - name: "Upload wheels"
        uses: actions/upload-artifact@v4
        with:
          name: wheels_${{ env.PACKAGE_NAME }}-x86_64-unknown-linux-musl
          path: dist

  musllinux-arm64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"


      - name: "Build wheels - aarch64 musl"
        uses: PyO3/maturin-action@v1
        with:
          target: aarch64-unknown-linux-musl
          manylinux: musllinux_1_2
          args: >
            --release
            --locked
            --out dist
            --features python
        env:
          CFLAGS_aarch64_unknown_linux_musl: "-D__ARM_ARCH=8"

      - name: "Upload wheels"
        uses: actions/upload-artifact@v4
        with:
          name: wheels_${{ env.PACKAGE_NAME }}-aarch64-unknown-linux-musl
          path: dist

  native-binaries:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - i686-unknown-linux-gnu
          - i686-unknown-linux-musl
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
    steps:
      - uses: actions/checkout@v4

      - name: "Setup Rust"
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: "Install cross-compilation tools"
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-multilib
          if [[ "${{ matrix.target }}" == *"aarch64"* ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi
          if [[ "${{ matrix.target }}" == *"musl"* ]]; then
            sudo apt-get install -y musl-tools
          fi

      - name: "Build native binaries"
        run: |
          cargo build --release --target ${{ matrix.target }} --bin dbcrust --bin dbc
          mkdir -p dist
          cd target/${{ matrix.target }}/release
          tar czf ../../../dist/dbcrust-${{ matrix.target }}.tar.gz dbcrust dbc
          cd ../../../dist
          sha256sum dbcrust-${{ matrix.target }}.tar.gz > dbcrust-${{ matrix.target }}.tar.gz.sha256

      - name: "Upload binary artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: binaries_${{ env.PACKAGE_NAME }}-${{ matrix.target }}
          path: dist

  native-binaries-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target:
          - x86_64-pc-windows-msvc
          - i686-pc-windows-msvc
    steps:
      - uses: actions/checkout@v4

      - name: "Setup Rust"
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: "Build native binaries"
        run: |
          cargo build --release --target ${{ matrix.target }} --bin dbcrust --bin dbc
          mkdir dist
          cd target/${{ matrix.target }}/release
          Compress-Archive -Path dbcrust.exe,dbc.exe -DestinationPath ../../../dist/dbcrust-${{ matrix.target }}.zip
          cd ../../../dist
          Get-FileHash -Algorithm SHA256 dbcrust-${{ matrix.target }}.zip | ForEach-Object { "$($_.Hash.ToLower())  dbcrust-${{ matrix.target }}.zip" } | Out-File -Encoding ASCII dbcrust-${{ matrix.target }}.zip.sha256
        shell: powershell

      - name: "Upload binary artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: binaries_${{ env.PACKAGE_NAME }}-${{ matrix.target }}
          path: dist

  native-binaries-macos:
    strategy:
      matrix:
        include:
          - os: macos-13
            target: x86_64-apple-darwin
          - os: macos-14
            target: aarch64-apple-darwin
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: "Setup Rust"
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: "Build native binaries"
        run: |
          cargo build --release --target ${{ matrix.target }} --bin dbcrust --bin dbc
          mkdir -p dist
          cd target/${{ matrix.target }}/release
          tar czf ../../../dist/dbcrust-${{ matrix.target }}.tar.gz dbcrust dbc
          cd ../../../dist
          shasum -a 256 dbcrust-${{ matrix.target }}.tar.gz > dbcrust-${{ matrix.target }}.tar.gz.sha256

      - name: "Upload binary artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: binaries_${{ env.PACKAGE_NAME }}-${{ matrix.target }}
          path: dist

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target:
          - x86_64-pc-windows-msvc
          - i686-pc-windows-msvc
    steps:
      - uses: actions/checkout@v4

      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: "Build wheels"
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: >
            --release
            --locked
            --out dist
            --features python

      - name: "Test wheel"
        if: matrix.target == 'x86_64-pc-windows-msvc'
        run: |
          pip install (Get-ChildItem dist/$env:PACKAGE_NAME-*.whl | Select-Object -First 1).FullName --force-reinstall
          & $env:PACKAGE_NAME --help
        shell: powershell

      - name: "Upload wheels"
        uses: actions/upload-artifact@v4
        with:
          name: wheels_${{ env.PACKAGE_NAME }}-${{ matrix.target }}
          path: dist

