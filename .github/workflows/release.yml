name: "Release"

on:
  push:
    tags:
      - 'v*' # Trigger on version tags
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to build and release"
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  plan:
    runs-on: ubuntu-latest
    outputs:
      plan: ${{ steps.plan.outputs.plan }}
      should_create_release: ${{ steps.plan.outputs.should_create_release }}
    steps:
      - id: plan
        run: |
          # Determine the tag based on trigger type
          if [ "${{ github.event_name }}" = "push" ]; then
            # Tag push event
            TAG="${{ github.ref_name }}"
            SHOULD_CREATE_RELEASE="true"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual dispatch
            TAG="${{ github.event.inputs.tag }}"
            SHOULD_CREATE_RELEASE="true"
          else
            # GitHub release event
            TAG="${{ github.event.release.tag_name }}"
            SHOULD_CREATE_RELEASE="false"
          fi
          
          echo "plan={\"tag\": \"$TAG\"}" >> $GITHUB_OUTPUT
          echo "should_create_release=$SHOULD_CREATE_RELEASE" >> $GITHUB_OUTPUT
          echo "Tag: $TAG, Should create release: $SHOULD_CREATE_RELEASE"

  build-binaries:
    needs: plan
    uses: ./.github/workflows/build-binaries.yml
    with:
      plan: ${{ needs.plan.outputs.plan }}

  create-release:
    if: ${{ needs.plan.outputs.should_create_release == 'true' }}
    needs: [plan]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from tag
        id: extract_version
        run: |
          TAG_NAME="${{ fromJson(needs.plan.outputs.plan).tag }}"
          VERSION="${TAG_NAME#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Generate release notes
        run: |
          echo "## Release ${{ steps.extract_version.outputs.tag_name }}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "ðŸš€ **DBCrust ${{ steps.extract_version.outputs.version }}** is now available!" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### Installation" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "#### Python/PyPI" >> RELEASE_NOTES.md
          echo '```bash' >> RELEASE_NOTES.md
          echo "# Quick run (no installation needed)" >> RELEASE_NOTES.md
          echo "uvx dbcrust postgresql://user:pass@localhost/mydb" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "# Install globally" >> RELEASE_NOTES.md
          echo "uv tool install dbcrust" >> RELEASE_NOTES.md
          echo '```' >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/${{ steps.extract_version.outputs.tag_name }}/CHANGELOG.md) for detailed changes." >> RELEASE_NOTES.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.extract_version.outputs.tag_name }}
          name: DBCrust ${{ steps.extract_version.outputs.version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ contains(steps.extract_version.outputs.tag_name, '-') }}
          generate_release_notes: false

  publish-pypi:
    if: ${{ !contains(fromJson(needs.plan.outputs.plan).tag, '-') }}
    needs: [plan, build-binaries]
    name: Upload dbcrust to PyPI
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    environment:
      name: pypi
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels_dbcrust-*
          path: wheels_dbcrust
          merge-multiple: true

      - name: "List downloaded artifacts"
        run: find wheels_dbcrust -type f -name "*.whl" | head -20

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: wheels_dbcrust/

  upload-release-artifacts:
    if: ${{ always() && !cancelled() && needs.build-binaries.result == 'success' }}
    needs: [plan, build-binaries, create-release]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: "Download all artifacts"
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: "Upload release assets"
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/wheels_*/*.whl
            artifacts/wheels_*/*.tar.gz
          tag_name: ${{ fromJson(needs.plan.outputs.plan).tag }}
          draft: false
          prerelease: ${{ contains(fromJson(needs.plan.outputs.plan).tag, '-') }}